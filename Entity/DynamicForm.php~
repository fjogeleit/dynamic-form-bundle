<?php

namespace DynamicFormBundle\Entity;

use DynamicFormBundle\Entity\FormElement\FormText;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Table
 * @ORM\Entity
 *
 * @package DynamicFormBundle\Entity
 */
class DynamicForm
{
    /**
     * @var int
     *
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(type="string")
     */
    private $name;

    /**
     * @var Collection|FormField[]
     *
     * @ORM\OneToMany(targetEntity="DynamicFormBundle\Entity\FormField", mappedBy="form", cascade={"persist", "remove"})
     */
    private $fields;

    /**
     * @var Collection|FormField[]
     *
     * @ORM\OneToMany(targetEntity="DynamicFormBundle\Entity\FormElement\FormText", mappedBy="form", cascade={"persist", "remove"})
     */
    private $elements;

    public function __construct()
    {
        $this->fields = new ArrayCollection();
        $this->elements = new ArrayCollection();
    }

    /**
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @param FormField $field
     *
     * @return DynamicForm
     */
    public function addField(FormField $field)
    {
        $this->fields[] = $field;

        return $this;
    }

    /**
     * @param FormField $field
     */
    public function removeField(FormField $field)
    {
        $this->fields->removeElement($field);
    }

    /**
     * @return Collection|FormField[]
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * @param string $name
     *
     * @return FormField|mixed|null
     */
    public function getField($name)
    {
        foreach ($this->getFields() as $field) {
            if ($field->getName() === $name) {
                return $field;
            }
        }

        return null;
    }

    /**
     * Add element
     *
     * @param FormText $element
     *
     * @return DynamicForm
     */
    public function addElement(FormText $element)
    {
        $this->elements[] = $element;

        return $this;
    }

    /**
     * Remove element
     *
     * @param FormText $element
     */
    public function removeElement(FormText $element)
    {
        $this->elements->removeElement($element);
    }

    /**
     * Get elements
     *
     * @return Collection|FormText[]
     */
    public function getElements()
    {
        return $this->elements;
    }

    /**
     * @param string $elementType
     *
     * @return FormText[]
     */
    public function findElements($elementType)
    {
        $elements = [];

        foreach ($this->getElements() as $element) {
            if ($elementType === $element->getElementType()) {
                $elements[] = $element;
            }
        }

        return $elements;
    }
}
